<!DOCTYPE html>
<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8">
	<title>roar</title>
	
	<script src="/static/js/jquery-1.6.2.min.js" type="text/javascript"></script>
	<script src="/socket.io/socket.io.js"></script>
	<script src="/static/js/jquery.md5.js"></script>

	<script type="text/javascript" charset="utf-8">
		
		var socket = io.connect("http://<%= server %>:<%= port %>");
		var rooms = [];
		var metaRooms = [];
		var pulseEnabled = true;
		
		socket.on('connect', function(data) {
			console.log("Connected to server.");

			if("roar-username" in localStorage) {
				// This client has logged in before. Present auth to the 
				// server.

				socket.emit("identify", {username:localStorage["roar-username"]});

			} else {
				// This client has not logged in before. Present the identify
				// UI and ask them what they want their name to be. Then
				// send that to the server. 
				$("#identity-container").show();
			}
		});

		// Now we need to start listening for an identify response.
		socket.on('identify', _handleIdentityResponse);
		
		socket.on('message', function (data) {
			appendChat(data);
		});
		
		socket.on('pulse', function (data) {
			updatePulse(data);
		});
		
		socket.on('rooms', function(data) {
			rooms = data;

			// The rooms data is a list sorted by population. It also has lots
			// of sort of duplicate rooms. So we're going to do a first pass
			// to combine all those rooms and hide them. When you select one,
			// it'll just default to the '1' version of that room. 
			
			var condensedList = {};
			var totalPop = 0;
			for(var roomIndex in rooms) {
				var room = rooms[roomIndex];
				
				// split the room name on spaces. If the room is a number room
				// then merge it in.
				var roomPieces = room["name"].split(' ');
				var shortName;
				
				totalPop += parseInt(room.population);
				
				if(!isNaN(parseInt(roomPieces[roomPieces.length-1]))) {
					// Then the last 'word' is a number and we can collapse 
					// it into a group.
					var remainingPieces = roomPieces.slice(0,
						roomPieces.length-1);
					shortName = remainingPieces.join(" ");
					
					
					// default to the room number that we encounter first
					var currentMetaroom = {"name":room["name"], "population":0, "num_instances":0, "total_activity":0};
					if(shortName in condensedList) currentMetaroom =
						condensedList[shortName];
					
					currentMetaroom["population"] += 
						parseInt(room["population"]);
					currentMetaroom["num_instances"] += 1;
					currentMetaroom["total_activity"] += room["relative"];
					
					condensedList[shortName] = currentMetaroom;
				} else {
					// It's a normal room (probably user-defined) and we 
					// should treat it normally. include it in the main list.
					var shortName = roomPieces.join(" ");

					
					condensedList[shortName] = room;
					condensedList[shortName]["num_instances"] = 0;
					condensedList[shortName]["relative"] = room["relative"];
				}

			}

			// Now turn the metaroom hash into a list.
			var metaRoomList = [];
			for(var roomName in condensedList) {
				var metaRoom = condensedList[roomName];
				metaRoom["short_name"] = roomName;
				
				if(metaRoom["num_instances"]!=0) {
					metaRoom["relative"] = metaRoom["total_activity"]/
						metaRoom["num_instances"];
				}
				metaRoomList.push(metaRoom);
			}
			
			metaRoomList.sort(function(a, b) {
				return a["population"] - b["population"];
			});
			metaRoomList.reverse();
			metaRooms = metaRoomList;
			
			$("#top-rooms-list li").remove();
			
			// todo sort the rooms first
			var maxRooms = 8;
			for(roomIndex in metaRoomList) {
				var room = metaRoomList[roomIndex];
				
				// Make the room item element and append it immediately.
				makeRoomItemFromRoom(room).appendTo($("#top-rooms-list"));
				
				if($("#top-rooms-list").children().length==maxRooms) break;
			}
			
			$("#total-users").text(totalPop);
		});
		
		socket.on('shout', function(data) {
			// Create a shout div.
			var shoutEl = $("<div></div>")
				.attr("id", "shout-" + data["id"])
				.addClass("shout")
				.append($("<div class='from'></div>").text(data["from"]))
				.append($("<div class='text'>" + data["text"] + "</div>"))
				.append($("<div class='votes-container'></div>")
					.append($("<div class='votes'>" + data["votes"]
						+ "</div>"))
					.append($("<div class='vote-button'>+1</div>")
						.attr("shout-id", data["id"])
						.click(function (event) {
							voteForShout($(this).attr("shout-id"));
							
							// Premeptively increment the value locally, so
							// there's clear local feedback and we don't need
							// to wait for confirmation from the server.
							// var voteCount=$(this).parent().children().first();
							// voteCount.text(parseInt(voteCount.text())+1);
							// (disabled for now - server responds super-fast, and that means we only have to validate on the server side.)
							
							$(this).addClass("disabled");
						})
						)
					)
				.append($("<br class='clear'>"))
				.appendTo($("#shout-live"));
				
				
				
		});
		
		socket.on('shout.vote', function(data) {
			// get the appropriate vote dom node and update it.
			$("#shout-" + data["id"] + " .votes").text(data["votes"]);
		});
		
		socket.on('shout.expire', function(data) {
			// TODO animate this.
			$("#shout-" + data["id"]).remove();
		});


		$(document).ready(function() {
			
			// Setup default visibility.
			$("#identity-message").hide();
			$("#chat-history").hide();
			$("#rooms-container").hide();
			$("#chat-sect").hide();
			$("#sections-sect").hide();
			$("#pulse-sect").hide();
			
			$(".callout").hide();
			
			$(window).blur(function() {
				pulseEnabled = false;
			});
			
			$(window).focus(function() {
				pulseEnabled = true;
			});
			
			$("#chat-input").attr("disabled", true);
			
			// Setup event handlers.
			$("#chat-form").submit(sendChat);
			
			$("#chat-button").click(sendChat);
			$("#shout-button").click(sendShout);
			
			$("#submit-name").click(function(event) {
				socket.emit("identify", {username:$("#name").val()});
				event.preventDefault();
			});
			
			$("#nickname").click(function() {
				$("#nickname").hide();
				$("#identity-form").show();
				$("#name").removeClass("default-text");
				$("#name").removeClass("default-text-active");
				
				$("#name").val($("#nickname").html());
			});
			
			$("#show-history").click(function () {
				if($("#chat-history").is(":visible")) {
					// If it's visible, animate it to make it disappear.
					$("#chat-history").animate({bottom:-300}, 500, function(){
						$(this).hide();
					});
					$("#show-history").removeClass("pressed");
				} else {
					// First, clear out the live view so it doesn't get in
					// the way.
					$("#chat-live").children().remove();
					
					$("#chat-history").show();
					$("#chat-history").animate({bottom:51}, 500, null);
					$("#chat-history").scrollTop(Math.pow(2, 30));
					
					$("#show-history").addClass("pressed");
				}
			});
			
			$("#room-select-form").submit(function (event) {
				joinRoom($("#room").val());
				event.preventDefault();
			});
			
			$("#identity-form").submit(function (event) {
				socket.emit("identify", {username:$("#name").val()});
				event.preventDefault();
			})
			
			$("#room").keyup(function (event) {
				// grab the text in #room and see if it matches any of our
				// room names. If it does, add those on to the room menu.
				
				$("#suggested-rooms-list").children().remove();
				
				var baseString = $(this).val();
				var matchedRooms = getRelatedRoomsForString(baseString);
				
				var item;
				if(matchedRooms.length>0) {
					for(var roomIndex in matchedRooms) {
						var room = matchedRooms[roomIndex];
						
						item = makeRoomItemFromRoom(room);
					}
				} else {
					item = $("<li></li>")
						.text("No sections start with '" + baseString + "'");
				}
				
				item.appendTo($("#suggested-rooms-list"));
			});
			
			$("#room").focus(function (event) {
				// show the room list
				toggleRoomList(event);
			});
			
			$("#room").blur(function (event) {
				// hide the room list
				setTimeout(toggleRoomList, 50);
			});
			
			$(".section-button").click(function (event) {
				$(".selected").removeClass("selected");
				
				$("#content").children().hide();
				$("#" + this.id.split("-")[0] + "-sect").show();
				
				$(this).addClass("selected");
			});
			
			
			$("#hide").click(function (event) {
				
				var hideEl = $(this);
				
				if($("#container").is(".minimized")) {
					$("#container").animate({
						top: "200px"
					}, 800, function() {
						$(this).removeClass("minimized");
						hideEl.text("hide");
						hideEl.width(100);
						
						$("<div id='backdrop'></div>").appendTo($("body"));
					});
				} else {
					$("#container").animate({
						top: "-315px"
					}, 800, function() {
						$(this).addClass("minimized");
						hideEl.text("about this project");
						hideEl.width(300);
						
						$("#backdrop").remove();
					});
				}
			});
			
			// Manage default text.
			$(".default-text").focus(function(srcc)
		    {
		        if ($(this).val() == $(this)[0].title)
		        {
		            $(this).removeClass("default-text-active");
		            $(this).val("");
		        }
		    });

		    $(".default-text").blur(function()
		    {
		        if ($(this).val() == "")
		        {
		            $(this).addClass("default-text-active");
		            $(this).val($(this)[0].title);
		        }
		    });
			
		    $(".default-text").blur();
		});
		
		function toggleRoomList(event) {
			if($("#rooms-container").is(":visible")) {
				$("#rooms-container").animate({bottom:-300}, 500, function(){
					$(this).hide();
				});
			} else {
				$("#rooms-container").show();
				$("#rooms-container").animate({bottom:51}, 500, null);
			}
		}
		
		function sendShout() {
			var chatTextElement = $("#chat-input");
			
			if(chatTextElement.val()=="") return;
			
			socket.emit("shout", {"text":chatTextElement.val()});
			chatTextElement.val("");
		}
		
		function voteForShout(shoutId) {
			socket.emit("shout.vote", {"shout_id":shoutId});
		}
		
		function sendChat(event) {
			var chatTextElement = $("#chat-input");
			
			if(chatTextElement.val() == "") {
				if(event!=null) event.preventDefault();
				return;
			}
			
			socket.emit("message", {"text":chatTextElement.val()});
			chatTextElement.val("");
			
			if(event!=null) event.preventDefault();
		}
		
		
		function appendChat(message) {
			
			// Make a normal message.
			classes = "";
			if("past" in message) classes += " past";
			
			if("admin" in message) classes += " admin";
			if("error" in message) classes += " error";
			
			 if(!("timestamp" in message)) {
			 	message.timestamp = Date.now();
			 }
			
			// We have two different versions because one of them (the
			// live one) gets expired and removed from the DOM. The other
			// one sticks around in a scrollable div for reviewing chat
			// history. They need different IDs to not collide.
			
			var hash = $.md5(message.timestamp + message.text);
			var liveId = 'chat-live-' + hash;
			var historyId = 'chat-' + hash;
			
			var contentsEl;
			if("admin" in message)  {
				contentsEl = $("<span class='contents'></span>");
				contentsEl.first().text(message.text);
			} else {
				contentsEl = $("<span class='from'></span>: <span class='contents'></span>");
				contentsEl.first().text(message.from);
				contentsEl.last().text(message.text);
			}
			
			var liveMessageEl = $("<div id='" + liveId + "' class='chat" + classes + "'></div>");
			liveMessageEl.append(contentsEl.clone());
			
			var historyMessageEl = $("<div id='" + historyId + "' class='chat" + classes + "'></div>");
			historyMessageEl.append(contentsEl.clone());
			
			// Append it. (is there a race condition here with removing elements? should I do this more formally with DOM operations?)
			chatHistory = $("#chat-history");
			chatHistory.append(historyMessageEl);
			
			// Scroll chat history down to the bottom.
			// INT_MAX. I want this to really represent the current height,
			// but I can't seem to find a property that represents the size 
			// that it really wants to be if there were no scrollbars to 
			// figure out how far down to push it. 
			chatHistory.scrollTop(Math.pow(2, 30));
			
			// Check and see if the history view is showing. If it is,
			// don't do live chat.
			if(!chatHistory.is(":visible")) {
				liveChat = $("#chat-live");
				liveChat.append(liveMessageEl);
			
				// This will remove each chat message from the list after 10 seconds and pull it out of the DOM entirely so the chat window area will manage its size automatically.
				setTimeout(function() {
					$("#chat-live-" + hash).animate({opacity:0.0}, 250, function() {
						$(this).remove();
					})
				}, 8000);
			}
		}
		
		function _handleIdentityResponse(data) {
			// this is called with repsonses to requests for a specific user
			// name. The server is either going to say "yes, you got it" or
			// "nope, that one is taken".
			if("state" in data && data["state"] == "OK") {
				// Start up the chat side of things.

				localStorage["roar-username"] = data["username"];

				$("#nickname").text(data["username"]);
				$("#nickname").show();
				
				$("#identity-form").hide();
				$("#chat-input").attr("disabled", false);
				$("#chat-input").focus();
				
				$(".button").removeClass("disabled");
				
				// Join a default room.
				if(!data["rename"]) {
					joinRoom("General Chat 1");
				}
			} else if ("state" in data && data["state"] == "TAKEN") {
				// Stay in the same mode.
				localAdminMessage("'"+data["username"]+"' is taken.", true);
				$("#identity-message").show();
				$("#identity-form").show();
				$("#name").focus();
				$("#name").text(data["username"]);
			}
		}
		
		function joinRoom(roomName) {
			$("#room").val(roomName);
			socket.emit("room", {"name":roomName});
			$("#chat-input").focus();
		}
		
		// This function is the heart of the visualization system. Everytime
		// we receive a message from the server with aggregate data about
		// keywords across all rooms. Given the picture of the state, animate
		// from where it is now to where it needs to be. What this function
		// will receive is a list of word/score combos.
		
		function updatePulse(pulse) {
			if(!pulseEnabled) return;
			
			// Take the activity metrics and turn one into messages/min and
			// put it into the right place in the DOM.
			$("#messages-per-min").html(
				pulse["activity"]["messages-per-min-instant"]);

			// First pass: iterate through the pulse list and for each word
			// in the list, create a div that represents it in a random loc.
			
			
			// Set a dummy attribute on all the children of pulse. Remove it
			// when we touch them. If it's still there at the end, remove
			// the element.
			$("#pulse").children().attr("untouched", "true");
			
			// $("#pulse").children().attr("untouched", "true");
			
			var pulseWords = pulse["words"];
			for(var itemIndex in pulseWords) {
				var pulseItem = pulseWords[itemIndex];
				var pulseWord = pulseItem["word"];
				
				// Runs 0->1
				var pulseMagnitude = pulseItem["score"];
				
				if(pulseWord=="") continue;
				
				// TODO change this to a hash so we can deal with words
				// that aren't legal CSS ids
				var wordId = "pulse-word-" + $.md5(pulseWord);
				
				// words are always created at 0.5 opacity if they're not
				// blurry. then, over time if they persist they gain opacity.
				var newOpacity = 0.3;
				
				// If the word already exists, find that element and update it
				// Otherwise, create a new one.
				var wordEl;
				if($("#" + wordId).length) {
					wordEl = $("#"+wordId);
					
					// If the word already exists, update its size.
					// (the extra -6 is to make sure that words still have
					//  some downward presure on their size over time even
					//  if they're getting a few points still)
					var size = pulseMagnitude*24;
					var newSize = parseInt(wordEl.css("font-size")) + size
						- 8;

					if(!isBlur && wordEl.hasClass("blur")) {
						// fix it up and make it workable.
						wordEl.removeClass("blur");
					} else if(!wordEl.hasClass("blur") &&
						newSize < 16) {
						// make it blur!
						wordEl.addClass("blur");
					}
					
					var newDimensions = getDimensionsForWord(
						wordEl.html(), newSize);
					
					// To make it look like it's growing equally in either
					// direction (instead of growing from the upper left 
					// corner), figure out how much larger it'll be after
					// growth and move left half of the difference.
					var leftDelta=(wordEl.width()-newDimensions["width"])/2;
					var topDelta=(wordEl.height()-newDimensions["height"])/2;
					
					wordEl.animate({
						fontSize: newSize,
						opacity: "+=" + 0.1,
						left: "+=" + leftDelta,
						top: "+=" + topDelta,
					}, 250, "linear", function() {
						
						// I feel like I should do this here, but when I do
						// I get weird behavior. Hmm.
							// if(newSize < 5) $(this).remove();
					});
					
					wordEl.removeAttr("untouched");
					
				} else {
					// If the word isn't on screen already, add it.
					
					var topPos = Math.random()*($(window).height()*0.3)
						+ $(window).height()*0.7;
					var leftPos = Math.random()*($(window).width()*0.65)
						+ $(window).width()*0.35;
					
					// the max size should be 2.25 with a pulse ranging from 
					// 0 - 1, but this puts stuff off the bottom edge at that
					// value, so upping it.
					var maxDimensions = getDimensionsForWord(pulseWord, 4);
					if(leftPos + maxDimensions["width"] > $(window).width()) {
						leftPos -= leftPos + maxDimensions["width"] - $(window).width();
					}
					
					if(topPos + maxDimensions["height"] > ($(window).height())) {
						topPos -= topPos + maxDimensions["height"] - $(window).height();
						
						// console.log("want to adjust top - " + (topPos + maxDimensions["height"] - $(window).height()));
					}
					
					
					wordEl = $(document.createElement('div'));
					wordEl.attr("id", wordId);
					wordEl.css("top", topPos);
					wordEl.css("left", leftPos);
					wordEl.addClass("pulse-word");
					wordEl.html(pulseWord);
					
					var size = pulseMagnitude*2*12;
					
					var isBlur = false;
					if(size < 16) {
						isBlur = true;
					}
					
					if(isBlur) {
						
						// if it's blur, create it as blurry
						wordEl.css("font-size", 16);
						wordEl.css("opacity", 0.0);
						wordEl.addClass("blur");

						$("#pulse").append(wordEl);
						
						wordEl.animate({
							opacity: 0.5
						}, 500, "linear", null);
						
					} else {

						// Create the element with default settings so it's
						// invisible but in the right place, then animate
						// it to the right size and opacity.
						wordEl.css("opacity", 0.0);
						wordEl.css("font-size", 4);
						$("#pulse").append(wordEl);
					
						var newDimensions = getDimensionsForWord(
							wordEl.html(),size);
						var leftDelta =
						 	(wordEl.width()-newDimensions["width"])/2;
						var topDelta =
							(wordEl.height()-newDimensions["height"])/2;
					
						wordEl.animate({
							opacity: newOpacity,
							fontSize: size,
							left: "+=" + leftDelta,
							top: "+=" + topDelta
						}, 500, "linear", null);
					}
					
					wordEl.css("z-index", parseInt(wordEl.css('font-size')));
				}
			}
			
			
			// Now cycle through all the elements in pulse and remove any
			// that haven't been touched - those have no magnitude
			// otherwise they would have been in the update list.
			var pulseWordEls = $("#pulse").children();
			// console.log("untouched words: ", pulseWordEls);
			
			pulseWordEls.map(function () {
				var element = $(this);

				if(element.attr("untouched")!=null) {
					// console.log("found one");
					// If the element still has the untouched attribute,
					// nuke it.
					
					// we're going to shrink by a fixed amount. Call it 5px 
					// for now.
					var newSize = parseInt(element.css("font-size")) - 8;

					var newDimensions = getDimensionsForWord(element.html(), newSize);
					var leftDelta=(element.width()-newDimensions["width"])/2;
					var topDelta=(element.height()-newDimensions["height"])/2;

					if(newSize < 16) {
						element.addClass("blur");
					}
					
					// clamp it because at small sizes you get weird behavior.
					if(newSize < 6) {
						newSize = 6;
					}

					// TODO come back to opacity and fix it. 
					element.animate({
						// opacity: 0.0,
						fontSize: newSize,
						left: "+=" + leftDelta,
						top: "+=" + topDelta
					}, 250, function() {
						if(newSize <= 6) $(this).remove();
					});
				}
			});
		 }
		
		// Used to generate local error messages into the chat logs.
		function localAdminMessage(message, isError) {
			var msgDict = {text:message, admin:"true", error:isError};
			appendChat(msgDict);
		}
		
		function getDimensionsForWord(word, size) {
			var buffer = $("#word-buffer");
			buffer.html(word);
			buffer.css("font-size", size);
			var size = {"width":buffer.width(), "height":buffer.height()};
			buffer.html("");
			return size;
		}
		
		function getRelatedRoomsForString(string) {
			// Given a string, loop through the room list and return a list of
			// any rooms that START with that string. This isn't super fancy,
			// but whatever. It's easy and will look okay in a demo.
			
			var candidateMetaRooms = [];
			
			if(string=="") return candidateMetaRooms;
			
			for (var roomIndex in metaRooms) {
				var room = metaRooms[roomIndex];
				
				var result = room["short_name"].search(string);
				var resultName = room["name"].search(string);
				
				if (result>-1) {
					candidateMetaRooms.push(room);
				}
			}
			
			return candidateMetaRooms;
		}
		
		function makeRoomItemFromRoom(room) {
			
			var roomName = room.name;
			var roomPop = room.population;
			

			var roomItem = $("<li></li>")
				.attr("title", room["name"])
				.click(function (event) {
					$("#room").val($(this).attr("title"));
					$("#room-select-form").submit();
				});

			var roomActivityIndicator = $("<div></div>")
				.addClass("activity")
				.appendTo(roomItem);
				
			// rescale relativeLevel (which runs approx 0-2) to 1-5.
			var relativeLevel = Math.floor(5*(room["relative"]/2));
			if(relativeLevel>5) relativeLevel = 5;
			
			var colorClass;
			switch(relativeLevel) {
				case 0:
					colorClass = "level-red";
					break;
				case 1:
				case 2:
					colorClass = "level-yellow";
					break;
				case 3:
				case 4:
					colorClass = "level-green";
					break;
				default:
					colorClass = "level-green";
			}
			for(var i=0; i<5; i++) {
				var activityPixel = $("<div></div>")
					.addClass("pixel")
					.appendTo(roomActivityIndicator);
				
				if(i<relativeLevel+1) activityPixel.addClass(colorClass);
			}

			
			var roomName = $("<div></div>");
			roomName.text(room.name + " ("+room.population+")")
				.appendTo(roomItem);
				
			if(room["num_instances"]!=0) {
				roomName.text(room.short_name + " ("+room.population+" in "+room.num_instances+" sections)");
			}
			
			
			return roomItem;
		}
		
	</script>
	
	<style type="text/css" media="screen">
		
		body {
			background-color: black;
			margin: 0px;
		}
		
		#roar-container {
			font-family: Helvetica, sans-serif;
		}
		
		#roar-bar {
			background-color: #928B33;
			
			background: -webkit-gradient(linear, left top, left bottom, from(#928B33), to(#413D1B)); /* for webkit browsers */
			background: -moz-linear-gradient(top,  #928B33,  #413D1B); /* for firefox 3.6+ */
			
			position: fixed;
			bottom: 0px;
			
			width: 100%;
			height: 50px;
			
			color: #FEFAD1;
			
			
			border-top: 1px solid #B3B5B8;
			
			z-index: 7000;
		}
		
		#chat, #roar-bar .button, #logo, #identity {
			border-right: 1px solid #B3B5B8;
			height: 100%;
			float: left;
		}
		
		#identity {
			border-right: 0px !important;
			padding-top: 15px;
			padding-left: 10px;
		}
		
		#stats {
			float: right;
/*			width: 150px;*/
			border-left: 1px solid #B3B5B8;
			
			height: 100%;
			
			text-align: center;
			padding-left: 10px;
			padding-right: 10px;
		}

		#stats table {
			width: 130px;
			float: left;
		}

		#stats .label {
			font-style: italic;
			font-size: 0.8em;
			text-align: right;
		}
		
		#stats .stat {
			font-weight: bold;
			font-size: 1.0em;
			text-align: left;
		}
		
		#room-select label {
			font-weight: bold;
			text-align: right;
			margin-right: 5px;
		}
		
		#room-select input {
			width: 180px;
		}
		
		#room-select {
			border-left: 1px solid #B3B5B8;
			height: 100%;
			float: right;
			padding-top: 15px;
			padding-left: 10px;
			width: 260px;
		}
		
		#logo {
			padding-top: 7px;
			
			font-weight: bold;
			font-size: 2em;
			width: 108px;
			text-align: center;
		}
		
		#chat {
			width: 345px;
			padding-top: 15px;
			
			font-size: 1.0em;
		}
		
		.chat {
			padding-left: 5px;
		}
		
		.past {
			color: #777;
		}
		
		.admin {
			background-color: rgba(50, 50, 50, 0.8);
			color: #eee;
			text-align: center;
		}
		
		.error {
			color: #EE011D;
		}
		
		#chat-form input {
			width: 295px;
			float: left;
			margin-left: 10px;
		}
		
		#show-history {
			width: 25px;
			height: 25px;
			float: left;
			margin-left: 5px;
			background-image: url('static/comments.png');
			background-repeat: no-repeat;
			background-position: center;
			
			-moz-border-radius: 5px;
			border-radius: 5px;
			
			cursor: pointer;
		}
		#show-history:hover {
			background-color: #ccc;
		}
		
		#show-history.pressed {
			background-color: #999;
		}
		
		#identity-form, #chat-form {
			margin-left: auto;
			margin-right:auto;
		}

		#chat-container {
			background-color: rgba(0,0,0,0.0);
			position: fixed;
			bottom: 51px;
			left: 109px;
			width: 450px;
		}
		
		#chat-live {
			color: #FEFAD1;
			text-shadow: 1px 1px 0px #111;
			width: 100%;
			float: left;
		}

		#shout-live {
			float: left;
			width: 100%;
		}

		#chat-history {
			background-color: rgba(254, 240, 209, 0.7);
			border: #928B33;
			color: #333;
			
			overflow-y: scroll;
			position:fixed;
			
			width: 450px;
			height: 300px;
			bottom: -200px;
			left: 109px;
			
			z-index: 2;
		}
		
		#rooms-container {
			background-color: rgba(254, 240, 209, 0.7);
			border: #928B33;
			color: #333;
			
			position:fixed;
			
			width: 270px;
			bottom: -200px;
			right: 0%;
			
			z-index: 2;
			
		}
		
		#rooms-container h1 {
			margin: 0px;
			font-size: 1.0em;
			background-color: #413D1B;
			color: #FEFAD1;
			padding: 5px;
			margin-bottom: 5px;
			
		}
		
		#rooms-container ul {
			padding-left: 0px;
			margin: 0px;
		}
		
		#rooms-container li {
			cursor: pointer;
			
			list-style-type: none;
			
			-webkit-user-select: none;
			-khtml-user-select: none;
			-moz-user-select: none;
			-o-user-select: none;
			user-select: none;
			
			margin-right: 5px;
			margin-left: 5px;
			margin-bottom: 0px;
		}
		
		#rooms-container li:hover {
			background-color: #ccc;
		}

		.activity {
			margin-right: 5px;
		}
		
		.level-green {
			background-color: green !important;
		}
		
		.level-yellow {
			background-color: yellow !important;
		}
		
		.level-red { 
			background-color: red !important;
		}
		
		.pixel {
			width: 5px;
			height: 5px;
			background-color: grey;
			margin-right: 2px;
			float: left;
			margin-top: 7px;
		}
		
		
		#roar-bar .button {
			width: 70px;
			text-align: center;
			font-size: 1.3em;
			font-variant: small-caps;
			font-weight: bold;
			padding-top: 10px;
			height: 40px;
			
			text-shadow: 1px 1px 0px #111;
			
/* http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting */
			-webkit-user-select: none;
			-khtml-user-select: none;
			-moz-user-select: none;
			-o-user-select: none;
			user-select: none;
		}
		
		#roar-bar .disabled {
			color: #888;
		}
		
		#roar-bar .disabled:active {
			background: inherit !important;
		}
		
		#roar-bar .button:active{
/*			background-color: #413D1B;*/
			
			background: -webkit-gradient(linear, left top, left bottom, from(#413D1B), to(#928B33)); /* for webkit browsers */
			background: -moz-linear-gradient(top,  #413D1B,  #928B33); /* for firefox 3.6+ */
		}
		
		#roar-bar .button:hover {
			cursor:pointer;
		}
		
		#name {
			width: 100px;
			float: left;
		}
		
		#submit-name {
			magin-left: 10px;
			margin-bottom: 10px;
		}

		#identity-message {
			background-color: #FEFAD1;
			padding: 3px;
			color: #333;
			font-size: 0.5em;
		}
		
		#nickname {
			font-weight: bold;
			font-size: 1.0em;
			
			border-radius: 5px;
			-moz-border-radius: 5px;
		}
		
		#nickname:hover {
			background-color: #444;
		}

		.shout {
			background-color: rgba(254, 240, 209, 0.7);
			border: 1px solid #928B33;
			color: black;
			text-shadow: none;
		}
		
		.shout .from, .shout .text {
			float: left;
		}
		
		.shout .from {
			margin-right: 2px;
		}
		
		.shout .text {
			max-width: 370px;
		}
		
		.shout .from:after {
			content:': ';
		}
		
		.shout .votes-container {
			float: right;
		}

		.votes-container .votes {
			float: left;
			font-style: italic;
			margin-right: 5px;
		}
		
		.votes-container .vote-button {
			float: left;
			background-color: rgba(254, 240, 209, 1.0);
			border: 1px solid #928B33;
			cursor: pointer;
			
			-webkit-user-select: none;
			-khtml-user-select: none;
			-moz-user-select: none;
			-o-user-select: none;
			user-select: none;
		}


		#stream-img {
			display: block;
			margin-left: auto;
			margin-right: auto;
			margin-top: 50px;
			height: 90%;
			border: 1px solid #333;
		}

		#pulse {
			position: fixed;
			top: 0px;
			left: 0px;
			background: rgba(1,1,1,0.0);
			width: 100%;
			height: 100%;
			
			/* http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting */
			-webkit-user-select: none;
			-khtml-user-select: none;
			-moz-user-select: none;
			-o-user-select: none;
			user-select: none;
		}
		
		.pulse-word {
			position: fixed;
			color: white;
			text-shadow: 1px 1px 0px #111;
			font-weight: bold;
			opacity: 0.7;
		}
		
		.blur {
			color: transparent;
			text-shadow: 0 0 4px white;
			opacity: 0.5;
		}
		

		#word-buffer {
			position: fixed;
			right: -10px;
			bottom: -10px;
			text-shadow: 1px 1px 0px #111;
			font-weight: bold;
		}
		
		/* Styles for the static webpage part of the site. */
		
		#backdrop {
			position: fixed;
			top: 0px;
			left: 0px;
			
			background-color: black;
			opacity: 0.6;
			width: 100%;
			height: 100%;
			z-index: 8000;
		}
		
		#container {
			position: fixed;
			
			top: 200px;
			left: 50%;
			
			width: 550px;
			
			margin-left: -200px;
			
			z-index: 8001;
			
			font-family: Helvetica, sans-serif;
			
		}
		
		#information {
			background-color: #f0f0f0;
			box-shadow: 3px 3px 0px black;
		}
		
		#header-container {
			width: 100%;
			height: 110px;
			padding: 5px;
		}
		
		#images {
			float: left;
			background-color: black;
			width: 200px;
			height: 106px;
			margin-right: 5px;
		}
		
		#header h1 {
			font-weight: bold;
			font-size: 3.0em;
			margin-top: 0px;
			margin-bottom: 0px;
		}
		
		#header h2 {
			font-style: italic;
			font-weight: normal;
			font-size: 1.2em;
			margin-top: 0px;
			margin-bottom: 0px;
		}
		
		.section-button {
			float: left;
			font-size: 1.1em;
			margin-right: 5px;
			margin-top: 5px;
			background-color: #aaa;
			padding: 2px;
			
			cursor: pointer;
		}
		
		.selected {
			background-color: #555;
		}
		
		#content {
			padding: 5px;
		}
		
		.explainer {
			width: 300px;
			position: absolute;
			height: 200px;
			
			bottom: 51px;
			left: 50px;
			z-index: 8000;
		}
		
		#hide {
			margin-left: 20px;
			font-weight: bold;
			width: 100px;
			color: white;
			cursor: pointer;
		}
		
		#name-callout {
			left: 120px;
			bottom: 51px;
		}
		
		#chat-callout {
			left: 180px;
			bottom: 51px;
			width: 300px;
		}
		
		#section-callout {
			right: 50px;
			bottom: 51px;
			width: 300px;
		}
		
		#pulse-callout {
			right: 40%;
			bottom: 30%;
			width: 300px;
		}
		
		#bots-callout {
			left: 150px;
			bottom: 20%;
			width: 300px;
		}

		/* using this strategy: http://mrcoles.com/blog/callout-box-css-border-triangles-cross-browser/ */
		.callout {
		    position: absolute;
			width: 200px;


		    margin: 18px 0;
		    padding: 18px 20px;
		    background-color: #eef4f9;
		    /* easy rounded corners for modern browsers */
		    -moz-border-radius: 6px;
		    -webkit-border-radius: 6px;
		    border-radius: 6px;
			
			z-index: 8000;
			
			font-family: Helvetica, sans-serif;
		}
		
		.callout .notch {
		    position: absolute;
		    bottom: -10px;
		    margin: 0;
		    border-bottom: 0;
		    border-left: 10px solid transparent;
		    border-right: 10px solid transparent;
		    border-top: 10px solid #eef4f9;
		    padding: 0;
		    width: 0;
		    height: 0;
		    /* ie6 height fix */
		    font-size: 0;
		    line-height: 0;
		     /* ie6 transparent fix */
		    _border-right-color: pink;
		    _border-left-color: pink;
		    _filter: chroma(color=pink);
		}
		
		.callout .left {
			left: 20px !important;
		}
		
		.callout .right {
			right: 20px !important;
		}
		
		#footer {
			width: 545px;
			background-color: #444;
			color: white;
			padding: 3px;
			font-size: 0.8em;
		}
		
		#footer a {
			font-weight: bold;
			color: white;
		}
		
		#footer a:visited {
			color:white;
		}

		/* Using this approach: http://www.dailycoding.com/Posts/default_text_fields_using_simple_jquery_trick.aspx */
	    .default-text { }
	    .default-text-active { color: #a1a1a1; font-style: italic; }
		
		.clear {
			clear: both;
		}
		
	</style>
	
</head>
<body>

<img id="stream-img" src="/static/starcraft.png">

<div id="container">
	<div id="information">
		<div id="header-container">
			<div id="images">
			</div>
			<div id="text">
				<div id="header">
					<h1>ROAR</h1>
					<h2>large scale chat for spectators</h2>
				</div>
				<div id="overview-title" class="section-button selected">
					overview
				</div>
				<div id="chat-title" class="section-button">
					chat &amp; shouts
				</div>
				<div id="sections-title" class="section-button">
					sections
				</div>
				<div id="pulse-title" class="section-button">
					pulse
				</div>
			</div>
		</div>
		<div id="content">
			<div id="overview-sect">
	The experience of being in a crowd is visceral. We feel a sense of connection and belonging through shared experiences like watching a sporting event, speech, or performance. In online environments, though, we are often part of a crowd without feeling it. <span class="roar">ROAR</span> is designed to allow very large groups of distributed spectators have meaningful conversations with strangers or friends while creating a sense of presence of thousands of other spectators. <span class="roar">ROAR</span> is also interested in creating opportunities for collective action among spectators and providing flexible ways to share content among very large groups. These systems combine to let you feel the roar of the crowd even if you're alone in your bedroom.
			</div>
			<div id="chat-sect">
				At its heart, <span class="roar">ROAR</span> is about chat. You can send two different kinds of text-based messages. Like a normal chat system, you can send chat messages to other people in your section of the crowd. These messages rapidly expire, but you can send them as often as you like. Shouts, on the other hand, have a life of their own. When you shout something, everyone in your section sees it first and if enough of them like it (by clicking '+1') people in other sections will see it too. 
			</div>
			<div id="sections-sect">
				Sections in <span class="roar">ROAR</span> are your way of deciding what kind of chat experience you want to have. Sections can be named anything you want&mdash;you can make your own section by just typing in any name you like. All sections are public, but only the most popular sections are shown in the suggested list, so you can make a section for just you and your friends if you like. Suggested sections all have a small activity indicator to help you gauge how active that section is; the more dots, the more chatting going on there. 
			</div>
			<div id="pulse-sect">
				Pulse is what really brings the crowd together in <span class="roar">ROAR</span>. The words you see bubbling up below are the most common recent terms across <emph>all</emph> sections. The more words there are, the more active the crowd is; when there are very few words, the crowd has gone silent. Well-coordinated crowds can manipulate this display by coordinating common outbursts (perhaps using the shout feature) to force the system to display their chosen words. 
			</div>
		</div>
	
		<div id="footer">
			Designed at the <a href="http://mit.edu">MIT</a> <a href="http://media.mit.edu/">Media Lab</a> by <a href="http://web.media.mit.edu/~dharry/">Drew Harry</a>
		</div>
	</div>
	<div id="hide">
		hide
	</div>
</div>

<div id="backdrop">
</div>



<div class="callout border-callout" id="name-callout">
	Start by choosing a nickname. You can always click on your nickname later to change it to something else.
    <b class="border-notch notch left"></b>
    <b class="notch left"></b>
</div>

<div class="callout border-callout" id="chat-callout">
	Type your message here! If you press "chat" (or hit return) the message will go to your section. If you press "shout", the message will start in your section and if enough people vote for it it will spread to other sections.
    <b class="border-notch notch left"></b>
    <b class="notch left"></b>
</div>

<div class="callout border-callout" id="section-callout">
	Use this to choose which section of the crowd you want to be in. You can choose an existing section or type in the name of your own custom section. A pop-up window will show you which sections have the most people and how active they are.
    <b class="border-notch notch notch right"></b>
    <b class="notch notch right"></b>
</div>


<div class="callout border-callout" id="bots-callout">
	This chat is coming from bots trained to talk about live Starcraft 2 matches. It can be a little incoherent (and occasionally a bit rude) but it's a nice way for me to test the visualization with real content. You can tell the bots to stop talking by saying <span class="command">/level 0</span> in chat. <span class="command">/level vary</span> will make them normal again. 
    <b class="border-notch notch notch left"></b>
    <b class="notch notch left"></b>
</div>

<div class="callout border-callout" id="pulse-callout">
	This is the pulse visualization area. The words shown here are the most popular terms across <emph>all</emph> sections. The more words visible, the more active the crowd is right now. The more solid the word, the longer it has been visible.
    <b class="border-notch notch notch right"></b>
    <b class="notch notch right"></b>
</div>

<div id="chat-explainer" class="explainer">
<div class="content">
</div>
<div class="notch">
</div>
</div>


<div id="roar-container">
<div id="roar-bar">
<div id="logo">ROAR</div>

<div id="chat-container">
<div id="chat-live">
</div>
<div id="shout-live">
</div>
</div>

<div id="identity">
	<div id="nickname"></div>
	<form id="identity-form">
		<input type="text" name="name" title="your nickname?" value="" id="name"class="default-text">
		<input type="button" name="submit_name" value="login" id="submit-name"><br>
	</form>
</div>

<div id="chat">
<form id="chat-form">
	<input type="text" name="chat-input" title="say something!" value="" id="chat-input" class="default-text" autocomplete="off">
	<div id="show-history"></div>
</form>


</div>
<div id="chat-button" class="button disabled">
chat
</div>
<div id="shout-button" class="button disabled">
shout
</div>


<div id="room-select">
<form id="room-select-form">
<label for="room">section</label><input type="text" name="room" value="" id="room">
</form>
</div>

<div id="stats">
	
	<table>
	<tr>
		<td class="label">spectators</td>
		<td class="stat" id="total-users"></td>
	</tr>
	<tr>
		<td class="label">messages/min</td>
		<td class="stat" id="messages-per-min"></td>
	</tr>
	</table>
</div>


</div>



<div id="rooms-container">
<h1>top sections</h1>
<ul id="top-rooms-list"></ul>
<h1>suggested rooms</h1>
<ul id="suggested-rooms-list"></ul>
</div>

<div id="chat-history">
</div>

<div id="pulse">
</div>

<div id="word-buffer">
</div>

</div>


</body>
</html>